{"id":"node_modules/party-js/lib/components/spline.js","dependencies":[{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\package.json","includedInParent":true,"mtime":1672826403432},{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\package.json","includedInParent":true,"mtime":1672823283328},{"name":"../systems/math","loc":{"line":4,"column":21,"index":126},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\components\\spline.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\systems\\math.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Spline = void 0;\r\nvar math_1 = require(\"../systems/math\");\r\n/**\r\n * Represents a spline that can be used to continueously evaluate a function\r\n * between keys. The base implementation is kept generic, so the functionality\r\n * can easily be implemented for similar constructs, such as gradients.\r\n */\r\nvar Spline = /** @class */ (function () {\r\n    /**\r\n     * Creates a new spline instance, using the specified keys.\r\n     * Note that you have to pass at least one key.\r\n     */\r\n    function Spline() {\r\n        var keys = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            keys[_i] = arguments[_i];\r\n        }\r\n        if (keys.length === 0) {\r\n            throw new Error(\"Splines require at least one key.\");\r\n        }\r\n        if (Array.isArray(keys[0])) {\r\n            throw new Error(\"You are trying to pass an array to the spline constructor, which is not supported. \" +\r\n                \"Try to spread the array into the constructor instead.\");\r\n        }\r\n        this.keys = keys;\r\n    }\r\n    /**\r\n     * Evaluates the spline at the given time.\r\n     */\r\n    Spline.prototype.evaluate = function (time) {\r\n        if (this.keys.length === 0) {\r\n            throw new Error(\"Attempt to evaluate a spline with no keys.\");\r\n        }\r\n        if (this.keys.length === 1) {\r\n            // The spline only contains one key, therefore is constant.\r\n            return this.keys[0].value;\r\n        }\r\n        // Sort the keys and figure out the first key above the passed time.\r\n        var ascendingKeys = this.keys.sort(function (a, b) { return a.time - b.time; });\r\n        var upperKeyIndex = ascendingKeys.findIndex(function (g) { return g.time > time; });\r\n        // If the found index is either 0 or -1, the specified time falls out\r\n        // of the range of the supplied keys. In that case, the value of the\r\n        // nearest applicant key is returned.\r\n        if (upperKeyIndex === 0) {\r\n            return ascendingKeys[0].value;\r\n        }\r\n        if (upperKeyIndex === -1) {\r\n            return ascendingKeys[ascendingKeys.length - 1].value;\r\n        }\r\n        // Otherwise, find the bounding keys, and extrapolate the time between\r\n        // the two. This is then used to interpolate between the two keys,\r\n        // using the provided implementation.\r\n        var lowerKey = ascendingKeys[upperKeyIndex - 1];\r\n        var upperKey = ascendingKeys[upperKeyIndex];\r\n        var containedTime = math_1.invlerp(lowerKey.time, upperKey.time, time);\r\n        return this.interpolate(lowerKey.value, upperKey.value, containedTime);\r\n    };\r\n    return Spline;\r\n}());\r\nexports.Spline = Spline;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/party-js/lib/components/spline.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}}],"sources":{"node_modules/party-js/lib/components/spline.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Spline = void 0;\r\nvar math_1 = require(\"../systems/math\");\r\n/**\r\n * Represents a spline that can be used to continueously evaluate a function\r\n * between keys. The base implementation is kept generic, so the functionality\r\n * can easily be implemented for similar constructs, such as gradients.\r\n */\r\nvar Spline = /** @class */ (function () {\r\n    /**\r\n     * Creates a new spline instance, using the specified keys.\r\n     * Note that you have to pass at least one key.\r\n     */\r\n    function Spline() {\r\n        var keys = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            keys[_i] = arguments[_i];\r\n        }\r\n        if (keys.length === 0) {\r\n            throw new Error(\"Splines require at least one key.\");\r\n        }\r\n        if (Array.isArray(keys[0])) {\r\n            throw new Error(\"You are trying to pass an array to the spline constructor, which is not supported. \" +\r\n                \"Try to spread the array into the constructor instead.\");\r\n        }\r\n        this.keys = keys;\r\n    }\r\n    /**\r\n     * Evaluates the spline at the given time.\r\n     */\r\n    Spline.prototype.evaluate = function (time) {\r\n        if (this.keys.length === 0) {\r\n            throw new Error(\"Attempt to evaluate a spline with no keys.\");\r\n        }\r\n        if (this.keys.length === 1) {\r\n            // The spline only contains one key, therefore is constant.\r\n            return this.keys[0].value;\r\n        }\r\n        // Sort the keys and figure out the first key above the passed time.\r\n        var ascendingKeys = this.keys.sort(function (a, b) { return a.time - b.time; });\r\n        var upperKeyIndex = ascendingKeys.findIndex(function (g) { return g.time > time; });\r\n        // If the found index is either 0 or -1, the specified time falls out\r\n        // of the range of the supplied keys. In that case, the value of the\r\n        // nearest applicant key is returned.\r\n        if (upperKeyIndex === 0) {\r\n            return ascendingKeys[0].value;\r\n        }\r\n        if (upperKeyIndex === -1) {\r\n            return ascendingKeys[ascendingKeys.length - 1].value;\r\n        }\r\n        // Otherwise, find the bounding keys, and extrapolate the time between\r\n        // the two. This is then used to interpolate between the two keys,\r\n        // using the provided implementation.\r\n        var lowerKey = ascendingKeys[upperKeyIndex - 1];\r\n        var upperKey = ascendingKeys[upperKeyIndex];\r\n        var containedTime = math_1.invlerp(lowerKey.time, upperKey.time, time);\r\n        return this.interpolate(lowerKey.value, upperKey.value, containedTime);\r\n    };\r\n    return Spline;\r\n}());\r\nexports.Spline = Spline;\r\n"},"lineCount":63}},"error":null,"hash":"40e9dd7b2408094651ccf7a7836d9ecc","cacheData":{"env":{}}}