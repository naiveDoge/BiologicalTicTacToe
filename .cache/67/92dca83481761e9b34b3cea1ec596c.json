{"id":"node_modules/party-js/lib/debug.js","dependencies":[{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\package.json","includedInParent":true,"mtime":1672826403432},{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\package.json","includedInParent":true,"mtime":1672823283328},{"name":"./containers","loc":{"line":9,"column":27,"index":324},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\debug.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\containers.js"},{"name":"./settings","loc":{"line":10,"column":25,"index":367},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\debug.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\settings.js"}],"generated":{"js":"\"use strict\";\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Debug = void 0;\r\nvar containers_1 = require(\"./containers\");\r\nvar settings_1 = require(\"./settings\");\r\n/**\r\n * Represents a utility module to view debug information inside the DOM.\r\n * This is disabled by default and needs to manually be enabled by setting\r\n * the '.enabled' field to true.\r\n *\r\n * While disabled, the utility will not fetch stats and update itself.\r\n */\r\nvar Debug = /** @class */ (function () {\r\n    /**\r\n     * Registers a new debug utility that is attached to the given scene.\r\n     *\r\n     * @param scene The scene to attach to.\r\n     */\r\n    function Debug(scene) {\r\n        this.scene = scene;\r\n        /**\r\n         * The rate at which the debug interface should refresh itself (per second).\r\n         */\r\n        this.refreshRate = 8;\r\n        /**\r\n         * The timer counting down to refreshes.\r\n         */\r\n        this.refreshTimer = 1 / this.refreshRate;\r\n    }\r\n    /**\r\n     * Processes a tick event in the interface. This checks if enough has passed to\r\n     * trigger a refresh, and if so, fetches the debug information and updates the DOM.\r\n     *\r\n     * @param delta The time that has elapsed since the last tick.\r\n     */\r\n    Debug.prototype.tick = function (delta) {\r\n        var container = containers_1.debugContainer.current;\r\n        // If the current display style does not match the style inferred from the\r\n        // enabled-state, update it.\r\n        var displayStyle = settings_1.settings.debug ? \"block\" : \"none\";\r\n        if (container.style.display !== displayStyle) {\r\n            container.style.display = displayStyle;\r\n        }\r\n        if (!settings_1.settings.debug) {\r\n            // If the interface is not enabled, don't fetch or update any infos.\r\n            return;\r\n        }\r\n        this.refreshTimer += delta;\r\n        if (this.refreshTimer > 1 / this.refreshRate) {\r\n            this.refreshTimer = 0;\r\n            // Update the container with the fetched information joined on line breaks.\r\n            container.innerHTML = this.getDebugInformation(delta).join(\"<br>\");\r\n        }\r\n    };\r\n    /**\r\n     * Fetches the debug information from the specified delta and the linked scene.\r\n     *\r\n     * @returns An array of debugging information, formatted as HTML.\r\n     */\r\n    Debug.prototype.getDebugInformation = function (delta) {\r\n        // Count emitters and particles.\r\n        var emitters = this.scene.emitters.length;\r\n        var particles = this.scene.emitters.reduce(function (acc, cur) { return acc + cur.particles.length; }, 0);\r\n        var infos = [\r\n            \"<b>party.js Debug</b>\",\r\n            \"--------------\",\r\n            \"FPS: \" + Math.round(1 / delta),\r\n            \"Emitters: \" + emitters,\r\n            \"Particles: \" + particles,\r\n        ];\r\n        // Emitter informations are formatted using their index, internal timer\r\n        // and total particle count.\r\n        var emitterInfos = this.scene.emitters.map(function (emitter) {\r\n            return [\r\n                // Show the current loop and the total loops.\r\n                \"\\u2B6F: \" + (emitter[\"currentLoop\"] + 1) + \"/\" + (emitter.options.loops >= 0 ? emitter.options.loops : \"âˆž\"),\r\n                // Show the amount of particle contained.\r\n                \"\\u03A3p: \" + emitter.particles.length,\r\n                // Show the internal timer.\r\n                !emitter.isExpired\r\n                    ? \"\\u03A3t: \" + emitter[\"durationTimer\"].toFixed(3) + \"s\"\r\n                    : \"<i>expired</i>\",\r\n            ].join(\", \");\r\n        });\r\n        infos.push.apply(infos, __spreadArray([\"--------------\"], emitterInfos));\r\n        return infos;\r\n    };\r\n    return Debug;\r\n}());\r\nexports.Debug = Debug;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/party-js/lib/debug.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/party-js/lib/debug.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}}],"sources":{"node_modules/party-js/lib/debug.js":"\"use strict\";\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Debug = void 0;\r\nvar containers_1 = require(\"./containers\");\r\nvar settings_1 = require(\"./settings\");\r\n/**\r\n * Represents a utility module to view debug information inside the DOM.\r\n * This is disabled by default and needs to manually be enabled by setting\r\n * the '.enabled' field to true.\r\n *\r\n * While disabled, the utility will not fetch stats and update itself.\r\n */\r\nvar Debug = /** @class */ (function () {\r\n    /**\r\n     * Registers a new debug utility that is attached to the given scene.\r\n     *\r\n     * @param scene The scene to attach to.\r\n     */\r\n    function Debug(scene) {\r\n        this.scene = scene;\r\n        /**\r\n         * The rate at which the debug interface should refresh itself (per second).\r\n         */\r\n        this.refreshRate = 8;\r\n        /**\r\n         * The timer counting down to refreshes.\r\n         */\r\n        this.refreshTimer = 1 / this.refreshRate;\r\n    }\r\n    /**\r\n     * Processes a tick event in the interface. This checks if enough has passed to\r\n     * trigger a refresh, and if so, fetches the debug information and updates the DOM.\r\n     *\r\n     * @param delta The time that has elapsed since the last tick.\r\n     */\r\n    Debug.prototype.tick = function (delta) {\r\n        var container = containers_1.debugContainer.current;\r\n        // If the current display style does not match the style inferred from the\r\n        // enabled-state, update it.\r\n        var displayStyle = settings_1.settings.debug ? \"block\" : \"none\";\r\n        if (container.style.display !== displayStyle) {\r\n            container.style.display = displayStyle;\r\n        }\r\n        if (!settings_1.settings.debug) {\r\n            // If the interface is not enabled, don't fetch or update any infos.\r\n            return;\r\n        }\r\n        this.refreshTimer += delta;\r\n        if (this.refreshTimer > 1 / this.refreshRate) {\r\n            this.refreshTimer = 0;\r\n            // Update the container with the fetched information joined on line breaks.\r\n            container.innerHTML = this.getDebugInformation(delta).join(\"<br>\");\r\n        }\r\n    };\r\n    /**\r\n     * Fetches the debug information from the specified delta and the linked scene.\r\n     *\r\n     * @returns An array of debugging information, formatted as HTML.\r\n     */\r\n    Debug.prototype.getDebugInformation = function (delta) {\r\n        // Count emitters and particles.\r\n        var emitters = this.scene.emitters.length;\r\n        var particles = this.scene.emitters.reduce(function (acc, cur) { return acc + cur.particles.length; }, 0);\r\n        var infos = [\r\n            \"<b>party.js Debug</b>\",\r\n            \"--------------\",\r\n            \"FPS: \" + Math.round(1 / delta),\r\n            \"Emitters: \" + emitters,\r\n            \"Particles: \" + particles,\r\n        ];\r\n        // Emitter informations are formatted using their index, internal timer\r\n        // and total particle count.\r\n        var emitterInfos = this.scene.emitters.map(function (emitter) {\r\n            return [\r\n                // Show the current loop and the total loops.\r\n                \"\\u2B6F: \" + (emitter[\"currentLoop\"] + 1) + \"/\" + (emitter.options.loops >= 0 ? emitter.options.loops : \"âˆž\"),\r\n                // Show the amount of particle contained.\r\n                \"\\u03A3p: \" + emitter.particles.length,\r\n                // Show the internal timer.\r\n                !emitter.isExpired\r\n                    ? \"\\u03A3t: \" + emitter[\"durationTimer\"].toFixed(3) + \"s\"\r\n                    : \"<i>expired</i>\",\r\n            ].join(\", \");\r\n        });\r\n        infos.push.apply(infos, __spreadArray([\"--------------\"], emitterInfos));\r\n        return infos;\r\n    };\r\n    return Debug;\r\n}());\r\nexports.Debug = Debug;\r\n"},"lineCount":96}},"error":null,"hash":"f8e3a2e25b83b877ce8e6ac3af16d3e0","cacheData":{"env":{}}}