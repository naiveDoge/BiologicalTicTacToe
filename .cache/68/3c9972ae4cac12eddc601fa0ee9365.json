{"id":"node_modules/party-js/lib/systems/shapes.js","dependencies":[{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\package.json","includedInParent":true,"mtime":1672826403432},{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\package.json","includedInParent":true,"mtime":1672823283328},{"name":"./variation","loc":{"line":4,"column":26,"index":171},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\systems\\shapes.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\systems\\variation.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveShapeFactory = exports.resolvableShapes = void 0;\r\nvar variation_1 = require(\"./variation\");\r\n/**\r\n * Represents the lookup that maps resolveable element keys to their HTML strings.\r\n *\r\n * @remarks\r\n * The default shapes are made to fit inside a dimension of 10x10 pixels, except\r\n * the 'star' shape, which exceeds it slightly.\r\n */\r\nexports.resolvableShapes = {\r\n    square: \"<div style=\\\"height: 10px; width: 10px;\\\"></div>\",\r\n    rectangle: \"<div style=\\\"height: 6px; width: 10px;\\\"></div>\",\r\n    circle: \"<svg viewBox=\\\"0 0 2 2\\\" width=\\\"10\\\" height=\\\"10\\\"><circle cx=\\\"1\\\" cy=\\\"1\\\" r=\\\"1\\\" fill=\\\"currentColor\\\"/></svg>\",\r\n    roundedSquare: \"<div style=\\\"height: 10px; width: 10px; border-radius: 3px;\\\"></div>\",\r\n    roundedRectangle: \"<div style=\\\"height: 6px; width: 10px; border-radius: 3px;\\\"></div>\",\r\n    star: \"<svg viewBox=\\\"0 0 512 512\\\" width=\\\"15\\\" height=\\\"15\\\"><polygon fill=\\\"currentColor\\\" points=\\\"512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842\\\"/></svg>\",\r\n};\r\n/**\r\n * Resolves the specified element factory using the resolvable elements, if needed.\r\n */\r\nfunction resolveShapeFactory(factory) {\r\n    // Retrieve the unresolved element from the factory.\r\n    var shape = variation_1.evaluateVariation(factory);\r\n    // If a string is returned, we need to resolve the element. This means\r\n    // looking up the string in the resolver lookup. If the key was not\r\n    // resolvable, we throw an error.\r\n    if (typeof shape === \"string\") {\r\n        var resolved = exports.resolvableShapes[shape];\r\n        if (!resolved) {\r\n            throw new Error(\"Failed to resolve shape key '\" + shape + \"'. Did you forget to add it to the 'resolvableShapes' lookup?\");\r\n        }\r\n        // We're in luck, we can resolve the element! We create a dummy <div> element\r\n        // to set the innerHTML of, and return the first element child.\r\n        var dummy = document.createElement(\"div\");\r\n        dummy.innerHTML = resolved;\r\n        return dummy.firstElementChild;\r\n    }\r\n    return shape;\r\n}\r\nexports.resolveShapeFactory = resolveShapeFactory;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/party-js/lib/systems/shapes.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/party-js/lib/systems/shapes.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveShapeFactory = exports.resolvableShapes = void 0;\r\nvar variation_1 = require(\"./variation\");\r\n/**\r\n * Represents the lookup that maps resolveable element keys to their HTML strings.\r\n *\r\n * @remarks\r\n * The default shapes are made to fit inside a dimension of 10x10 pixels, except\r\n * the 'star' shape, which exceeds it slightly.\r\n */\r\nexports.resolvableShapes = {\r\n    square: \"<div style=\\\"height: 10px; width: 10px;\\\"></div>\",\r\n    rectangle: \"<div style=\\\"height: 6px; width: 10px;\\\"></div>\",\r\n    circle: \"<svg viewBox=\\\"0 0 2 2\\\" width=\\\"10\\\" height=\\\"10\\\"><circle cx=\\\"1\\\" cy=\\\"1\\\" r=\\\"1\\\" fill=\\\"currentColor\\\"/></svg>\",\r\n    roundedSquare: \"<div style=\\\"height: 10px; width: 10px; border-radius: 3px;\\\"></div>\",\r\n    roundedRectangle: \"<div style=\\\"height: 6px; width: 10px; border-radius: 3px;\\\"></div>\",\r\n    star: \"<svg viewBox=\\\"0 0 512 512\\\" width=\\\"15\\\" height=\\\"15\\\"><polygon fill=\\\"currentColor\\\" points=\\\"512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842\\\"/></svg>\",\r\n};\r\n/**\r\n * Resolves the specified element factory using the resolvable elements, if needed.\r\n */\r\nfunction resolveShapeFactory(factory) {\r\n    // Retrieve the unresolved element from the factory.\r\n    var shape = variation_1.evaluateVariation(factory);\r\n    // If a string is returned, we need to resolve the element. This means\r\n    // looking up the string in the resolver lookup. If the key was not\r\n    // resolvable, we throw an error.\r\n    if (typeof shape === \"string\") {\r\n        var resolved = exports.resolvableShapes[shape];\r\n        if (!resolved) {\r\n            throw new Error(\"Failed to resolve shape key '\" + shape + \"'. Did you forget to add it to the 'resolvableShapes' lookup?\");\r\n        }\r\n        // We're in luck, we can resolve the element! We create a dummy <div> element\r\n        // to set the innerHTML of, and return the first element child.\r\n        var dummy = document.createElement(\"div\");\r\n        dummy.innerHTML = resolved;\r\n        return dummy.firstElementChild;\r\n    }\r\n    return shape;\r\n}\r\nexports.resolveShapeFactory = resolveShapeFactory;\r\n"},"lineCount":43}},"error":null,"hash":"0825d954eded8f6cfbe6669546d69cf8","cacheData":{"env":{}}}