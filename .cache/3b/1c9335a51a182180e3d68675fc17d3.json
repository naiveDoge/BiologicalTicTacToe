{"id":"node_modules/party-js/lib/util/rotation.js","dependencies":[{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\package.json","includedInParent":true,"mtime":1672826403432},{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\package.json","includedInParent":true,"mtime":1672823283328},{"name":"../components","loc":{"line":4,"column":27,"index":142},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\util\\rotation.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\components\\index.js"},{"name":"../systems/math","loc":{"line":5,"column":21,"index":182},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\util\\rotation.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\lib\\systems\\math.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rotationToNormal = void 0;\r\nvar components_1 = require(\"../components\");\r\nvar math_1 = require(\"../systems/math\");\r\n/**\r\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\r\n *\r\n * @remarks\r\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\r\n * origin, and rotating it by the specified angles. Note that the z-component of the\r\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\r\n * describing the orientation of the plane are calculated. Their cross product\r\n * denotes the normal vector.\r\n *\r\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\r\n */\r\nfunction rotationToNormal(rotation) {\r\n    var alpha = rotation.x * math_1.deg2rad;\r\n    var beta = rotation.y * math_1.deg2rad;\r\n    var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));\r\n    var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));\r\n    return a.cross(b);\r\n}\r\nexports.rotationToNormal = rotationToNormal;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/party-js/lib/util/rotation.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"node_modules/party-js/lib/util/rotation.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rotationToNormal = void 0;\r\nvar components_1 = require(\"../components\");\r\nvar math_1 = require(\"../systems/math\");\r\n/**\r\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\r\n *\r\n * @remarks\r\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\r\n * origin, and rotating it by the specified angles. Note that the z-component of the\r\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\r\n * describing the orientation of the plane are calculated. Their cross product\r\n * denotes the normal vector.\r\n *\r\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\r\n */\r\nfunction rotationToNormal(rotation) {\r\n    var alpha = rotation.x * math_1.deg2rad;\r\n    var beta = rotation.y * math_1.deg2rad;\r\n    var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));\r\n    var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));\r\n    return a.cross(b);\r\n}\r\nexports.rotationToNormal = rotationToNormal;\r\n"},"lineCount":26}},"error":null,"hash":"31f4bab9bc77cf9157d627a0d4b3e207","cacheData":{"env":{}}}