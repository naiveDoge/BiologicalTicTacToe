{"id":"node_modules/ansi/lib/newlines.js","dependencies":[{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\package.json","includedInParent":true,"mtime":1672824798308},{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\ansi\\package.json","includedInParent":true,"mtime":1672824797808},{"name":"assert","loc":{"line":23,"column":21,"index":547},"parent":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\ansi\\lib\\newlines.js","resolved":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\assert\\assert.js"}],"generated":{"js":"\n/**\n * Accepts any node Stream instance and hijacks its \"write()\" function,\n * so that it can count any newlines that get written to the output.\n *\n * When a '\\n' byte is encountered, then a \"newline\" event will be emitted\n * on the stream, with no arguments. It is up to the listeners to determine\n * any necessary deltas required for their use-case.\n *\n * Ex:\n *\n *   var cursor = ansi(process.stdout)\n *     , ln = 0\n *   process.stdout.on('newline', function () {\n *    ln++\n *   })\n */\n\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert')\nvar NEWLINE = '\\n'.charCodeAt(0)\n\nfunction emitNewlineEvents (stream) {\n  if (stream._emittingNewlines) {\n    // already emitting newline events\n    return\n  }\n\n  var write = stream.write\n\n  stream.write = function (data) {\n    // first write the data\n    var rtn = write.apply(stream, arguments)\n\n    if (stream.listeners('newline').length > 0) {\n      var len = data.length\n        , i = 0\n      // now try to calculate any deltas\n      if (typeof data == 'string') {\n        for (; i<len; i++) {\n          processByte(stream, data.charCodeAt(i))\n        }\n      } else {\n        // buffer\n        for (; i<len; i++) {\n          processByte(stream, data[i])\n        }\n      }\n    }\n\n    return rtn\n  }\n\n  stream._emittingNewlines = true\n}\nmodule.exports = emitNewlineEvents\n\n\n/**\n * Processes an individual byte being written to a stream\n */\n\nfunction processByte (stream, b) {\n  assert.equal(typeof b, 'number')\n  if (b === NEWLINE) {\n    stream.emit('newline')\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ansi/lib/newlines.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ansi/lib/newlines.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}}],"sources":{"node_modules/ansi/lib/newlines.js":"\n/**\n * Accepts any node Stream instance and hijacks its \"write()\" function,\n * so that it can count any newlines that get written to the output.\n *\n * When a '\\n' byte is encountered, then a \"newline\" event will be emitted\n * on the stream, with no arguments. It is up to the listeners to determine\n * any necessary deltas required for their use-case.\n *\n * Ex:\n *\n *   var cursor = ansi(process.stdout)\n *     , ln = 0\n *   process.stdout.on('newline', function () {\n *    ln++\n *   })\n */\n\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert')\nvar NEWLINE = '\\n'.charCodeAt(0)\n\nfunction emitNewlineEvents (stream) {\n  if (stream._emittingNewlines) {\n    // already emitting newline events\n    return\n  }\n\n  var write = stream.write\n\n  stream.write = function (data) {\n    // first write the data\n    var rtn = write.apply(stream, arguments)\n\n    if (stream.listeners('newline').length > 0) {\n      var len = data.length\n        , i = 0\n      // now try to calculate any deltas\n      if (typeof data == 'string') {\n        for (; i<len; i++) {\n          processByte(stream, data.charCodeAt(i))\n        }\n      } else {\n        // buffer\n        for (; i<len; i++) {\n          processByte(stream, data[i])\n        }\n      }\n    }\n\n    return rtn\n  }\n\n  stream._emittingNewlines = true\n}\nmodule.exports = emitNewlineEvents\n\n\n/**\n * Processes an individual byte being written to a stream\n */\n\nfunction processByte (stream, b) {\n  assert.equal(typeof b, 'number')\n  if (b === NEWLINE) {\n    stream.emit('newline')\n  }\n}\n"},"lineCount":72}},"error":null,"hash":"c189b0bb135f86d0d9afbb3ea22c7550","cacheData":{"env":{}}}