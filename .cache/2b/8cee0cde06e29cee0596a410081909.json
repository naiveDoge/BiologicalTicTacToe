{"id":"node_modules/party-js/lib/util/lazy.js","dependencies":[{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\package.json","includedInParent":true,"mtime":1672826403432},{"name":"C:\\Users\\Zhou\\Documents\\BiologicalTicTacToe\\node_modules\\party-js\\package.json","includedInParent":true,"mtime":1672823283328}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Lazy = void 0;\r\n/**\r\n * A wrapper class to lazily initialize a value.\r\n * Supports custom factory and predicate methods.\r\n */\r\nvar Lazy = /** @class */ (function () {\r\n    function Lazy(factory, exists) {\r\n        if (exists === void 0) { exists = Lazy.defaultExists; }\r\n        this.factory = factory;\r\n        this.exists = exists;\r\n    }\r\n    Object.defineProperty(Lazy.prototype, \"current\", {\r\n        /**\r\n         * The current value of the lazy object. Will be initialized, if the 'exists'\r\n         * predicate doesn't match.\r\n         */\r\n        get: function () {\r\n            if (!this.exists(this.value)) {\r\n                this.value = this.factory();\r\n            }\r\n            return this.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Lazy.defaultExists = function (value) {\r\n        return typeof value !== \"undefined\";\r\n    };\r\n    return Lazy;\r\n}());\r\nexports.Lazy = Lazy;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/party-js/lib/util/lazy.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"node_modules/party-js/lib/util/lazy.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Lazy = void 0;\r\n/**\r\n * A wrapper class to lazily initialize a value.\r\n * Supports custom factory and predicate methods.\r\n */\r\nvar Lazy = /** @class */ (function () {\r\n    function Lazy(factory, exists) {\r\n        if (exists === void 0) { exists = Lazy.defaultExists; }\r\n        this.factory = factory;\r\n        this.exists = exists;\r\n    }\r\n    Object.defineProperty(Lazy.prototype, \"current\", {\r\n        /**\r\n         * The current value of the lazy object. Will be initialized, if the 'exists'\r\n         * predicate doesn't match.\r\n         */\r\n        get: function () {\r\n            if (!this.exists(this.value)) {\r\n                this.value = this.factory();\r\n            }\r\n            return this.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Lazy.defaultExists = function (value) {\r\n        return typeof value !== \"undefined\";\r\n    };\r\n    return Lazy;\r\n}());\r\nexports.Lazy = Lazy;\r\n"},"lineCount":34}},"error":null,"hash":"d57d05fa81f9428406511e497e21462b","cacheData":{"env":{}}}